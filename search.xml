<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>checkinstall</title>
    <url>/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/checkinstall/</url>
    <content><![CDATA[<h2 id="checkinstall"><a class="markdownIt-Anchor" href="#checkinstall"></a> checkinstall</h2>
<hr />
<h3 id="what-is-checkinstall"><a class="markdownIt-Anchor" href="#what-is-checkinstall"></a> What is checkinstall?</h3>
<p>checkinstall is a tool that allows you to create a package from a compiled program. It is useful for creating a package for a program that is not available in the package manager. It is also useful for creating a package for a program that is available in the package manager, but you want to modify it.</p>
<h3 id="how-to-use-checkinstall"><a class="markdownIt-Anchor" href="#how-to-use-checkinstall"></a> How to use checkinstall?</h3>
<ol>
<li>Compile the program you want to package.</li>
<li>checkinstall -D --install=no</li>
</ol>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>elf-startup</title>
    <url>/%E5%86%85%E6%A0%B8%E5%9F%BA%E7%A1%80/elf-startup/</url>
    <content><![CDATA[<h3 id="elf头部"><a class="markdownIt-Anchor" href="#elf头部"></a> ELF头部</h3>
<hr />
<p>ELF header (Ehdr)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=3583&amp;fi=97#97">ELF头部</a>是ELF文件的开始，它包含了ELF文件的类型、目标体系结构、版本、入口点、程序头部表、节头部表、程序头部表的大小、程序头部表的数量、节头部表的大小、节头部表的数量、节头部表的字符串表索引等信息</p>
<p>ELF头部的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EI_NIDENT 16    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> e_ident[EI_NIDENT]; <span class="comment">/* ELF identification */</span></span><br><span class="line">    Elf32_Half e_type; <span class="comment">/* Object file type */</span></span><br><span class="line">    Elf32_Half e_machine; <span class="comment">/* Machine type */</span></span><br><span class="line">    Elf32_Word e_version; <span class="comment">/* Object file version */</span></span><br><span class="line">    Elf32_Addr e_entry; <span class="comment">/* Entry point address */</span></span><br><span class="line">    Elf32_Off e_phoff; <span class="comment">/* Program header offset */</span></span><br><span class="line">    Elf32_Off e_shoff; <span class="comment">/* Section header offset */</span></span><br><span class="line">    Elf32_Word e_flags; <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">    Elf32_Half e_ehsize; <span class="comment">/* ELF header size */</span></span><br><span class="line">    Elf32_Half e_phentsize; <span class="comment">/* Size of program header entry */</span></span><br><span class="line">    Elf32_Half e_phnum; <span class="comment">/* Number of program header entries */</span></span><br><span class="line">    Elf32_Half e_shentsize; <span class="comment">/* Size of section header entry */</span></span><br><span class="line">    Elf32_Half e_shnum; <span class="comment">/* Number of section header entries */</span></span><br><span class="line">    Elf32_Half e_shstrndx; <span class="comment">/* Section name string table index */</span></span><br><span class="line">&#125; ElfN_Ehdr;</span><br></pre></td></tr></table></figure>
<h3 id="程序头部"><a class="markdownIt-Anchor" href="#程序头部"></a> 程序头部</h3>
<hr />
<p>Program header (Phdr)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=28720&amp;fi=707#707">程序头部</a>表是一个数组，每个元素是一个程序头部，它描述了一个段的类型、偏移、虚拟地址、物理地址、大小、对齐、标志等信息</p>
<p>程序头部的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word p_type; <span class="comment">/* Segment type */</span></span><br><span class="line">    Elf32_Off p_offset; <span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf32_Addr p_vaddr; <span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf32_Addr p_paddr; <span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf32_Word p_filesz; <span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf32_Word p_memsz; <span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf32_Word p_flags; <span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf32_Word p_align; <span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; ElfN_Phdr;</span><br></pre></td></tr></table></figure>
<h3 id="节头部"><a class="markdownIt-Anchor" href="#节头部"></a> 节头部</h3>
<hr />
<p>Section header (Shdr)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=16921&amp;fi=409#409">节头部</a>表是一个数组，每个元素是一个节头部，它描述了一个节的名称、类型、标志、地址、偏移、大小、链接、信息、对齐、入口大小等信息</p>
<p>节头部的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word sh_name; <span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">    Elf32_Word sh_type; <span class="comment">/* Section type */</span></span><br><span class="line">    Elf32_Word sh_flags; <span class="comment">/* Section flags */</span></span><br><span class="line">    Elf32_Addr sh_addr; <span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">    Elf32_Off sh_offset; <span class="comment">/* Section file offset */</span></span><br><span class="line">    Elf32_Word sh_size; <span class="comment">/* Section size in bytes */</span></span><br><span class="line">    Elf32_Word sh_link; <span class="comment">/* Link to another section */</span></span><br><span class="line">    Elf32_Word sh_info; <span class="comment">/* Additional section information */</span></span><br><span class="line">    Elf32_Word sh_addralign; <span class="comment">/* Section alignment */</span></span><br><span class="line">    Elf32_Word sh_entsize; <span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; ElfN_Shdr;</span><br></pre></td></tr></table></figure>
<h3 id="符号表"><a class="markdownIt-Anchor" href="#符号表"></a> 符号表</h3>
<hr />
<p>Symbol table (Sym)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=22738&amp;fi=538#538">符号表</a>是一个数组，每个元素是一个符号，它描述了一个符号的名称、值、大小、类型、绑定、其他信息等信息</p>
<p>符号表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word st_name; <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">    Elf32_Addr st_value; <span class="comment">/* Symbol value */</span></span><br><span class="line">    Elf32_Word st_size; <span class="comment">/* Symbol size */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_info; <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_other; <span class="comment">/* Symbol visibility */</span></span><br><span class="line">    Elf32_Half st_shndx; <span class="comment">/* Section index */</span></span><br><span class="line">&#125; ElfN_Sym;</span><br></pre></td></tr></table></figure>
<h3 id="重定位表"><a class="markdownIt-Anchor" href="#重定位表"></a> 重定位表</h3>
<hr />
<p>Relocation table (Rel)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=26949&amp;fi=650#650">重定位表</a>是一个数组，每个元素是一个重定位项，它描述了一个重定位的地址、符号表索引、类型等信息</p>
<p>重定位表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Addr r_offset; <span class="comment">/* Address */</span></span><br><span class="line">    Elf32_Word r_info; <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; ElfN_Rel;</span><br></pre></td></tr></table></figure>
<h3 id="动态表"><a class="markdownIt-Anchor" href="#动态表"></a> 动态表</h3>
<hr />
<p>Dynamic table (Dyn)</p>
<p><a href="http://diyao.f3322.net:2228/xref/glibc/elf/elf.h?r=fb6ee7ba&amp;mo=36198&amp;fi=869#869">动态表</a>是一个数组，每个元素是一个动态项，它描述了一个动态的标签、值等信息</p>
<p>动态表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Sword d_tag; <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Elf32_Word d_val; <span class="comment">/* Integer value */</span></span><br><span class="line">        Elf32_Addr d_ptr; <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; ElfN_Dyn;</span><br></pre></td></tr></table></figure>
<h3 id="字符串表"><a class="markdownIt-Anchor" href="#字符串表"></a> 字符串表</h3>
<hr />
<p>String table (Strtab)</p>
<p>字符串表是一个数组，每个元素是一个字符，它描述了一个字符串</p>
<p>字符串表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span>      st_name;</span><br><span class="line">    Elf32_Addr    st_value;</span><br><span class="line">    <span class="type">uint32_t</span>      st_size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_info;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_other;</span><br><span class="line">    <span class="type">uint16_t</span>      st_shndx;</span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span>      st_name;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_info;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> st_other;</span><br><span class="line">    <span class="type">uint16_t</span>      st_shndx;</span><br><span class="line">    Elf64_Addr    st_value;</span><br><span class="line">    <span class="type">uint64_t</span>      st_size;</span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>
<h3 id="符号版本表"><a class="markdownIt-Anchor" href="#符号版本表"></a> 符号版本表</h3>
<hr />
<p>Symbol version table (Ver)</p>
<p>符号版本表是一个数组，每个元素是一个符号版本，它描述了一个符号版本的名称、索引、其他信息等信息</p>
<p>符号版本表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Half vn_version; <span class="comment">/* Version revision */</span></span><br><span class="line">    Elf32_Half vn_cnt; <span class="comment">/* Number of associated aux entries */</span></span><br><span class="line">    Elf32_Word vn_file; <span class="comment">/* Offset of verneed section */</span></span><br><span class="line">    Elf32_Word vn_aux; <span class="comment">/* Offset in vernaux array */</span></span><br><span class="line">    Elf32_Word vn_next; <span class="comment">/* Offset in verneed array */</span></span><br><span class="line">&#125; ElfN_Verneed;</span><br></pre></td></tr></table></figure>
<h3 id="符号版本辅助表"><a class="markdownIt-Anchor" href="#符号版本辅助表"></a> 符号版本辅助表</h3>
<hr />
<p>Symbol version auxiliary table (Vna)</p>
<p>符号版本辅助表是一个数组，每个元素是一个符号版本辅助项，它描述了一个符号版本辅助项的名称、索引、其他信息等信息</p>
<p>符号版本辅助表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word vna_hash; <span class="comment">/* Hash value of dependency name */</span></span><br><span class="line">    Elf32_Half vna_flags; <span class="comment">/* Dependency specific information */</span></span><br><span class="line">    Elf32_Half vna_other; <span class="comment">/* Version of dependency */</span></span><br><span class="line">    Elf32_Word vna_name; <span class="comment">/* Dependency name string offset */</span></span><br><span class="line">    Elf32_Word vna_next; <span class="comment">/* Offset in vernaux array */</span></span><br><span class="line">&#125; ElfN_Vernaux;</span><br></pre></td></tr></table></figure>
<h3 id="符号版本依赖表"><a class="markdownIt-Anchor" href="#符号版本依赖表"></a> 符号版本依赖表</h3>
<hr />
<p>Symbol version dependency table (Vnd)</p>
<p>符号版本依赖表是一个数组，每个元素是一个符号版本依赖项，它描述了一个符号版本依赖项的名称、索引、其他信息等信息</p>
<p>符号版本依赖表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Half vd_version; <span class="comment">/* Version of structure */</span></span><br><span class="line">    Elf32_Half vd_flags; <span class="comment">/* Version information */</span></span><br><span class="line">    Elf32_Half vd_ndx; <span class="comment">/* Version Index */</span></span><br><span class="line">    Elf32_Half vd_cnt; <span class="comment">/* Number of associated aux entries */</span></span><br><span class="line">    Elf32_Word vd_hash; <span class="comment">/* Version name hash value */</span></span><br><span class="line">    Elf32_Word vd_aux; <span class="comment">/* Offset in vdaux array */</span></span><br><span class="line">    Elf32_Word vd_next; <span class="comment">/* Offset in verdef array */</span></span><br><span class="line">&#125; ElfN_Verdef;</span><br></pre></td></tr></table></figure>
<h3 id="符号版本依赖辅助表"><a class="markdownIt-Anchor" href="#符号版本依赖辅助表"></a> 符号版本依赖辅助表</h3>
<hr />
<p>Symbol version dependency auxiliary table (Vda)</p>
<p>符号版本依赖辅助表是一个数组，每个元素是一个符号版本依赖辅助项，它描述了一个符号版本依赖辅助项的名称、索引、其他信息等信息</p>
<p>符号版本依赖辅助表的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Word vda_name; <span class="comment">/* Version or dependency names */</span></span><br><span class="line">    Elf32_Word vda_next; <span class="comment">/* Offset in vdaux array */</span></span><br><span class="line">&#125; ElfN_Verdaux;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内核基础</category>
      </categories>
      <tags>
        <tag>Elf结构</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu-machine</title>
    <url>/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/qemu-machine/</url>
    <content><![CDATA[<h2 id="编译riscv64虚拟机"><a class="markdownIt-Anchor" href="#编译riscv64虚拟机"></a> 编译riscv64虚拟机</h2>
<hr />
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://cdimage.ubuntu.com/releases/20.04.2/release/ubuntu-20.04.2-preinstalled-server-riscv64.img.xz</span><br><span class="line">xz -dk ubuntu-20.04.2-preinstalled-server-riscv64.img.xz </span><br><span class="line">sudo qemu-system-riscv64 -machine virt -nographic -m 2048 -smp 2 -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.elf -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf -device virtio-net-device,netdev=eth0 -netdev user,id=eth0 -drive file=ubuntu-20.04.5-preinstalled-server-riscv64+unmatched.img,format=raw,if=virtio</span><br></pre></td></tr></table></figure>
<h2 id="编译armhf虚拟机"><a class="markdownIt-Anchor" href="#编译armhf虚拟机"></a> 编译armhf虚拟机</h2>
<hr />
<h3 id="编译内核"><a class="markdownIt-Anchor" href="#编译内核"></a> 编译内核</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.79.tar.xz</span><br><span class="line">sudo apt-get install crossbuild-essential-riscv64</span><br><span class="line">make ARCH=riscv defconfig &amp;&amp; make ARCH=riscv menuconfig </span><br><span class="line">make -j4 ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- </span><br></pre></td></tr></table></figure>
<h3 id="构造rootfs"><a class="markdownIt-Anchor" href="#构造rootfs"></a> 构造rootfs</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo truncate -s 128G rootfs.img &amp;&amp; sudo mkfs.ext4 rootfs.img</span><br><span class="line">sudo mount -o loop ./rootfs.img /mnt</span><br><span class="line">sudo debootstrap --arch=riscv64 --foreign --no-check-gpg sid . http://deb.debian.org/debian-ports</span><br><span class="line">sudo chroot /mnt &amp;&amp; &amp;&amp; /debootstrap/debootstrap --second-stage &amp;&amp; echo &quot;root:riscv&quot; | chpasswd</span><br></pre></td></tr></table></figure>
<h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2>
<hr />
<ul>
<li>[1] <a href="https://packages.debian.org/sid/crossbuild-essential-riscv64">riscv64-linux-gnu</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Linux模拟器</tag>
        <tag>Qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>haveged</title>
    <url>/uncategorized/haveged/</url>
    <content><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2>
<hr />
<p>熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过 很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。</p>
<p>如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，这产生的随机数的效果就不是很好了，/dev/random会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回</p>
<ol>
<li>查看系统熵 <code>sysctl kernel.random.entropy_avail</code></li>
<li>安装haveged <code>sudo apt-get install haveged</code></li>
</ol>
<h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2>
<hr />
<ul>
<li>[1] <a href="https://blog.csdn.net/weixin_38287155/article/details/95891886">Linux内核中的随机数生成</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux工具</tag>
      </tags>
  </entry>
</search>
